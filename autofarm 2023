-- (VOID) : Gui to Lua
-- Version: 1.4

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local intro = Instance.new("ImageLabel")
local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
local MainFrame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local functions = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local UIStroke = Instance.new("UIStroke")
local ScrollingFrame = Instance.new("ScrollingFrame")
local func = Instance.new("Frame")
local UICorner_3 = Instance.new("UICorner")
local TextLabel = Instance.new("TextLabel")
local enable = Instance.new("TextButton")
local UICorner_4 = Instance.new("UICorner")
local disable = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local light = Instance.new("UIStroke")
local UIGradient = Instance.new("UIGradient")
local UIListLayout = Instance.new("UIListLayout")
local keymode = Instance.new("Frame")
local UICorner_6 = Instance.new("UICorner")
local TextLabel_2 = Instance.new("TextLabel")
local enable_2 = Instance.new("TextButton")
local UICorner_7 = Instance.new("UICorner")
local disable_2 = Instance.new("TextButton")
local UICorner_8 = Instance.new("UICorner")
local TextLabel_3 = Instance.new("TextLabel")
local light_2 = Instance.new("UIStroke")
local UIGradient_2 = Instance.new("UIGradient")
local slider = Instance.new("Frame")
local UICorner_9 = Instance.new("UICorner")
local TextLabel_4 = Instance.new("TextLabel")
local light_3 = Instance.new("UIStroke")
local UIGradient_3 = Instance.new("UIGradient")
local Frame = Instance.new("Frame")
local SlidingPart = Instance.new("Frame")
local Background = Instance.new("Frame")
local UICorner_10 = Instance.new("UICorner")
local UIStroke_2 = Instance.new("UIStroke")
local UIGradient_4 = Instance.new("UIGradient")
local ValueFrame = Instance.new("Frame")
local UICorner_11 = Instance.new("UICorner")
local TextLabel_5 = Instance.new("TextLabel")
local Slider = Instance.new("Frame")
local Button = Instance.new("TextButton")
local UICorner_12 = Instance.new("UICorner")
local UICorner_13 = Instance.new("UICorner")
local RabdomText = Instance.new("TextLabel")
local Frame_2 = Instance.new("Frame")
local UICorner_14 = Instance.new("UICorner")
local close = Instance.new("TextButton")
local UICorner_15 = Instance.new("UICorner")

--Properties:

ScreenGui.Parent = (game:GetService("CoreGui") or gethui())
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

intro.Name = "intro"
intro.Parent = ScreenGui
intro.AnchorPoint = Vector2.new(0.5, 0.5)
intro.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
intro.BackgroundTransparency = 1.000
intro.BorderColor3 = Color3.fromRGB(0, 0, 0)
intro.BorderSizePixel = 0
intro.Position = UDim2.new(0.5, 0, 0.5, 0)
intro.Size = UDim2.new(0.23963134, 0, 0.389027417, 0)
intro.Image = "http://www.roblox.com/asset/?id=14939447488"
intro.ImageTransparency = 1.000

UIAspectRatioConstraint.Parent = intro

MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
MainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0.5, 0, 0.490701616, 0)
MainFrame.Size = UDim2.new(0.3563748, 0, 0.274565279, 0)
MainFrame.Visible = false

UICorner.Parent = MainFrame

functions.Name = "functions"
functions.Parent = MainFrame
functions.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
functions.BorderColor3 = Color3.fromRGB(0, 0, 0)
functions.BorderSizePixel = 0
functions.ClipsDescendants = true
functions.Position = UDim2.new(0.0264462437, 0, 0.042275317, 0)
functions.Size = UDim2.new(0.947107434, 0, 0.915525734, 0)

UICorner_2.Parent = functions

UIStroke.Parent = functions

ScrollingFrame.Parent = functions
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollingFrame.BackgroundTransparency = 1.000
ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.ClipsDescendants = false
ScrollingFrame.Position = UDim2.new(0.0182042476, 0, 0.0347222202, 0)
ScrollingFrame.Size = UDim2.new(0.981795728, 0, 0.965277791, 0)
ScrollingFrame.ScrollBarThickness = 15

func.Name = "func"
func.Parent = ScrollingFrame
func.BackgroundColor3 = Color3.fromRGB(72, 72, 77)
func.BorderColor3 = Color3.fromRGB(0, 0, 0)
func.BorderSizePixel = 0
func.Position = UDim2.new(0.0227553099, 0, 0.029761903, 0)
func.Size = UDim2.new(0.953447521, 0, 0.138888881, 0)

UICorner_3.Parent = func

TextLabel.Parent = func
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0.665871143, 0, 1, 0)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = "Фарм тепла деда"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextScaled = true
TextLabel.TextSize = 14.000
TextLabel.TextWrapped = true

enable.Name = "enable"
enable.Parent = func
enable.BackgroundColor3 = Color3.fromRGB(97, 200, 0)
enable.BorderColor3 = Color3.fromRGB(0, 0, 0)
enable.BorderSizePixel = 0
enable.Position = UDim2.new(0.727923632, 0, 0.125, 0)
enable.Size = UDim2.new(0.245823383, 0, 0.732142866, 0)
enable.Font = Enum.Font.SourceSans
enable.Text = "Активировать"
enable.TextColor3 = Color3.fromRGB(0, 0, 0)
enable.TextScaled = true
enable.TextSize = 14.000
enable.TextWrapped = true

UICorner_4.Parent = enable

disable.Name = "disable"
disable.Parent = func
disable.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
disable.BorderColor3 = Color3.fromRGB(0, 0, 0)
disable.BorderSizePixel = 0
disable.Position = UDim2.new(0.727923632, 0, 0.125, 0)
disable.Size = UDim2.new(0.245823383, 0, 0.732142866, 0)
disable.Visible = false
disable.Font = Enum.Font.SourceSans
disable.Text = "Деактивировать"
disable.TextColor3 = Color3.fromRGB(0, 0, 0)
disable.TextScaled = true
disable.TextSize = 14.000
disable.TextWrapped = true

UICorner_5.Parent = disable

light.Color = Color3.fromRGB(255, 255, 255)
light.Thickness = 2.000
light.Parent = func
light.Name = "light"

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient.Parent = light

UIListLayout.Parent = ScrollingFrame
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0.00999999978, 0)

keymode.Name = "keymode"
keymode.Parent = ScrollingFrame
keymode.BackgroundColor3 = Color3.fromRGB(72, 72, 77)
keymode.BorderColor3 = Color3.fromRGB(0, 0, 0)
keymode.BorderSizePixel = 0
keymode.Position = UDim2.new(0.0227553099, 0, 0.029761903, 0)
keymode.Size = UDim2.new(0.953447521, 0, 0.138888881, 0)

UICorner_6.Parent = keymode

TextLabel_2.Parent = keymode
TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.BackgroundTransparency = 1.000
TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_2.BorderSizePixel = 0
TextLabel_2.Size = UDim2.new(0.665871143, 0, 0.339285702, 0)
TextLabel_2.Font = Enum.Font.SourceSans
TextLabel_2.Text = "Тестовый keypress() режим"
TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.TextScaled = true
TextLabel_2.TextSize = 14.000
TextLabel_2.TextWrapped = true

enable_2.Name = "enable"
enable_2.Parent = keymode
enable_2.BackgroundColor3 = Color3.fromRGB(97, 200, 0)
enable_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
enable_2.BorderSizePixel = 0
enable_2.Position = UDim2.new(0.727923632, 0, 0.125, 0)
enable_2.Size = UDim2.new(0.245823383, 0, 0.732142866, 0)
enable_2.Font = Enum.Font.SourceSans
enable_2.Text = "Активировать"
enable_2.TextColor3 = Color3.fromRGB(0, 0, 0)
enable_2.TextScaled = true
enable_2.TextSize = 14.000
enable_2.TextWrapped = true

UICorner_7.Parent = enable_2

disable_2.Name = "disable"
disable_2.Parent = keymode
disable_2.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
disable_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
disable_2.BorderSizePixel = 0
disable_2.Position = UDim2.new(0.727923632, 0, 0.125, 0)
disable_2.Size = UDim2.new(0.245823383, 0, 0.732142866, 0)
disable_2.Visible = false
disable_2.Font = Enum.Font.SourceSans
disable_2.Text = "Деактивировать"
disable_2.TextColor3 = Color3.fromRGB(0, 0, 0)
disable_2.TextScaled = true
disable_2.TextSize = 14.000
disable_2.TextWrapped = true

UICorner_8.Parent = disable_2

TextLabel_3.Parent = keymode
TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.BackgroundTransparency = 1.000
TextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_3.BorderSizePixel = 0
TextLabel_3.Position = UDim2.new(0, 0, 0.321428567, 0)
TextLabel_3.Size = UDim2.new(0.665871143, 0, 0.678571403, 0)
TextLabel_3.Font = Enum.Font.SourceSans
TextLabel_3.Text = "Этот режим будет пытаться использовать функцию keypress предназначенную для пк но на телефоне"
TextLabel_3.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.TextScaled = true
TextLabel_3.TextSize = 14.000
TextLabel_3.TextWrapped = true

light_2.Color = Color3.fromRGB(255, 255, 255)
light_2.Thickness = 2.000
light_2.Parent = keymode
light_2.Name = "light"

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_2.Parent = light_2

slider.Name = "slider"
slider.Parent = ScrollingFrame
slider.BackgroundColor3 = Color3.fromRGB(72, 72, 77)
slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
slider.BorderSizePixel = 0
slider.Position = UDim2.new(0.0227553099, 0, 0.029761903, 0)
slider.Size = UDim2.new(0.953447521, 0, 0.138888881, 0)

UICorner_9.Parent = slider

TextLabel_4.Parent = slider
TextLabel_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.BackgroundTransparency = 1.000
TextLabel_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_4.BorderSizePixel = 0
TextLabel_4.Size = UDim2.new(1, 0, 0.339285702, 0)
TextLabel_4.Font = Enum.Font.SourceSans
TextLabel_4.Text = "Коррекция времени телепортации"
TextLabel_4.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.TextScaled = true
TextLabel_4.TextSize = 14.000
TextLabel_4.TextWrapped = true

light_3.Color = Color3.fromRGB(255, 255, 255)
light_3.Thickness = 2.000
light_3.Parent = slider
light_3.Name = "light"

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_3.Parent = light_3

Frame.Parent = slider
Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame.BackgroundTransparency = 1.000
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(7.41847899e-08, 0, 0.321000248, 0)
Frame.Size = UDim2.new(0.893040836, 0, 0.67900002, 0)

SlidingPart.Name = "SlidingPart"
SlidingPart.Parent = Frame
SlidingPart.AnchorPoint = Vector2.new(0.5, 0.5)
SlidingPart.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SlidingPart.BackgroundTransparency = 1.000
SlidingPart.BorderColor3 = Color3.fromRGB(0, 0, 0)
SlidingPart.BorderSizePixel = 0
SlidingPart.Position = UDim2.new(0.490999997, 0, 0.513000011, 0)
SlidingPart.Size = UDim2.new(0.861000001, 0, 0.289999992, 0)

Background.Name = "Background"
Background.Parent = SlidingPart
Background.AnchorPoint = Vector2.new(0.5, 0.5)
Background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Background.Position = UDim2.new(0.5, 0, 0.5, 0)
Background.Size = UDim2.new(1, 0, 1, 0)

UICorner_10.Parent = Background

UIStroke_2.Thickness = 2.000
UIStroke_2.Parent = Background

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(40, 40, 45)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
UIGradient_4.Parent = Background

ValueFrame.Name = "ValueFrame"
ValueFrame.Parent = SlidingPart
ValueFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ValueFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ValueFrame.BorderSizePixel = 0
ValueFrame.Position = UDim2.new(1.04012609, 0, -1.17610586, 0)
ValueFrame.Size = UDim2.new(0, 53, 0, 29)

UICorner_11.Parent = ValueFrame

TextLabel_5.Parent = ValueFrame
TextLabel_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.BackgroundTransparency = 1.000
TextLabel_5.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_5.BorderSizePixel = 0
TextLabel_5.Size = UDim2.new(1, 0, 1, 0)
TextLabel_5.Font = Enum.Font.SourceSans
TextLabel_5.Text = "0"
TextLabel_5.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.TextScaled = true
TextLabel_5.TextSize = 14.000
TextLabel_5.TextWrapped = true

Slider.Name = "Slider"
Slider.Parent = SlidingPart
Slider.AnchorPoint = Vector2.new(0.5, 0.5)
Slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
Slider.BorderSizePixel = 0
Slider.Position = UDim2.new(0.5, 0, 0.5, 0)
Slider.Size = UDim2.new(0.0680000037, 0, 1.92999995, 0)

Button.Name = "Button"
Button.Parent = Slider
Button.AnchorPoint = Vector2.new(0.5, 0.5)
Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
Button.BorderColor3 = Color3.fromRGB(20, 32, 40)
Button.Position = UDim2.new(0.5, 0, 0.499999553, 0)
Button.Size = UDim2.new(0.899999976, 0, 0.899999976, 0)
Button.ZIndex = 200
Button.Font = Enum.Font.GothamBlack
Button.Text = ""
Button.TextColor3 = Color3.fromRGB(255, 255, 255)
Button.TextScaled = true
Button.TextSize = 14.000
Button.TextWrapped = true

UICorner_12.Parent = Button

UICorner_13.Parent = Slider

RabdomText.Name = "RabdomText"
RabdomText.Parent = MainFrame
RabdomText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
RabdomText.BackgroundTransparency = 1.000
RabdomText.BorderColor3 = Color3.fromRGB(0, 0, 0)
RabdomText.BorderSizePixel = 0
RabdomText.Position = UDim2.new(0, 0, -0.190734521, 0)
RabdomText.Size = UDim2.new(0.915948272, 0, 0.158945397, 0)
RabdomText.ZIndex = 2
RabdomText.Font = Enum.Font.SourceSans
RabdomText.Text = "Ура тепло деда"
RabdomText.TextColor3 = Color3.fromRGB(255, 255, 255)
RabdomText.TextScaled = true
RabdomText.TextSize = 14.000
RabdomText.TextWrapped = true

Frame_2.Parent = MainFrame
Frame_2.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame_2.BorderSizePixel = 0
Frame_2.Position = UDim2.new(0, 0, -0.190734521, 0)
Frame_2.Size = UDim2.new(1, 0, 0.158945441, 0)

UICorner_14.Parent = Frame_2

close.Name = "close"
close.Parent = Frame_2
close.BackgroundColor3 = Color3.fromRGB(80, 80, 85)
close.BorderColor3 = Color3.fromRGB(0, 0, 0)
close.BorderSizePixel = 0
close.Position = UDim2.new(0.922413766, 0, 0, 0)
close.Size = UDim2.new(0.0775862038, 0, 1, 0)
close.ZIndex = 10
close.Font = Enum.Font.FredokaOne
close.Text = "X"
close.TextColor3 = Color3.fromRGB(255, 0, 0)
close.TextScaled = true
close.TextSize = 14.000
close.TextWrapped = true

UICorner_15.Parent = close







spawn(function()
	wait(1)
	local script = Instance.new('LocalScript', ScreenGui)
	local tween = game:GetService("TweenService")
	--local slider = loadstring(game:HttpGet('https://raw.githubusercontent.com/contentdeleted/lua/main/autofarm%202023'))()
	--local timer = loadstring(game:HttpGet('https://raw.githubusercontent.com/contentdeleted/roblox-slider/main/slider%20v2'))()
	local slider = require(script.Parent.SliderModule)
	local timer = require(script.Parent.timer)
	local enabled = false
	local testmode = false
	local main_cooldown = 2
	local tp_cooldown = 0.75
	local tp_cooldown_correction = 0
	local main_frame = script.Parent.MainFrame
	local debris_found = false
	local debris = game:GetService("Debris")
	local random_text = {
		"Thanks for using this script!",
		"The script was written by Heckers Company",
		"The Heckers Company consists of one person 💀",
		"We have some more interesting scripts ｡ꞈ｡",
		"No one wants to join our discord server <(＿　＿)>",
		"Is someone reading this text?...",
		"Hello "..game.Players.LocalPlayer.Name.."!",
		"I want a chocolate bar.. and coffee..",
		"You like using exploits, don't you? <( 7  w  7 )>",
		"Interesting fact.. you can turn off this text (kill me) in the settings :<",
		"Hey! Help me! they locked me in this script! ＞︿＜",
		"It's a pity that no one tell me if they like my scripts or not... ╯︿╰",
		"infinite yield is a very cool script btw :)",
		"Do you like hurting other people? <（￣︶￣）>",
		"Я тебя блядь захуярю",
		"Stalin_Love_Loli - AnimeSyndrom",
		"Ahhhh!~ SENPAI~",
		"Heeeeeeey! Can anyone hear me?",
		"Hey bro, nice cock 🐔",
		"Бляя... "..game.Players.LocalPlayer.Name.." ты бы знал какой костыль мне пришлось сделать что б это заработало"
	}

	if debris then
		debris_found = true
	end
	local default_tween = TweenInfo.new(2,Enum.EasingStyle.Linear,Enum.EasingDirection.InOut,1,false,2)
	local introimg = script.Parent:WaitForChild("intro")
	wait(1)
	tween:Create(introimg,default_tween,{ImageTransparency = 0}):Play()
	wait(4)
	tween:Create(introimg,default_tween,{ImageTransparency = 1}):Play()
	wait(4)
	local slider_frame = script.Parent.MainFrame.functions.ScrollingFrame.slider.Frame
	local newSlider = slider.new(slider_frame.SlidingPart, slider_frame.SlidingPart.Slider, slider_frame.SlidingPart.Slider.Button, 
		{
			min = -1.5,
			max = 1.5,
			snapFactor = 0.05
		}, 
		{
			TextBox = slider_frame.SlidingPart.ValueFrame.TextLabel
		})
	newSlider:Activate()
	newSlider.ValueChanged.Event:Connect(function(currentValue: number)
		tp_cooldown_correction = currentValue
	end)
	introimg.Visible = false
	function gui_drag()
		local UIS = game:GetService('UserInputService')
		local frame = main_frame
		local dragToggle = nil
		local dragSpeed = 0.25
		local dragStart = nil
		local startPos = nil
		local function updateInput(input)
			local delta = input.Position - dragStart
			local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
				startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
		end
		frame.InputBegan:Connect(function(input)
			if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
				dragToggle = true
				dragStart = input.Position
				startPos = frame.Position
				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragToggle = false
					end
				end)
			end
		end)
		UIS.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				if dragToggle then
					updateInput(input)
				end
			end
		end)
	end
	spawn(gui_drag)
	main_frame.Visible = true
	function typetext(obj,text)
		for i = 1,#text,1 do
			obj.Text = string.sub(text,1,i)
			wait(0.05)
		end
	end
	function randoms()
		while wait(math.random(10,20)) do
			local last
			local r = random_text[math.random(1, #random_text)]
			if not(r == last) then
				typetext(main_frame.RabdomText,r)
			end
		end
	end
	if not game.Workspace:FindFirstChild("_SnowflakeCache") then
		typetext(main_frame.RabdomText,"Хм.. похоже что разработчики поменяли имя папки с снежинками, пожалуйста напишите об этом разработчику скрипта (не удалось найти папку \"workspace._SnowflakeCache\")")
	end

	spawn(randoms)

	function farm()
		while wait(main_cooldown) do
			if enabled then
				local folder = game.workspace:WaitForChild("_SnowflakeCache")
				local plr = game.Workspace:WaitForChild(game.Players.LocalPlayer.Name)
				plr = game.Workspace:WaitForChild(game.Players.LocalPlayer.Name)
				for _,i in pairs(folder:GetChildren()) do
					plr:SetPrimaryPartCFrame(i.CFrame)
					wait(tp_cooldown + timer.new(-0.5,0.5,4,0.12345) + tp_cooldown_correction)
					if testmode then
						keypress(0x45)
						wait(0.01)
						keyrelease(0x45)
					end
				end
			end
		end
	end

	local act_buttons = script.Parent.MainFrame.functions.ScrollingFrame.func
	local enable = act_buttons.enable
	local disable = act_buttons.disable

	enable.MouseButton1Click:Connect(function()
		enable.Visible = false
		disable.Visible = true
		enabled = true
	end)
	disable.MouseButton1Click:Connect(function()
		enable.Visible = true
		disable.Visible = false
		enabled = false
	end)

	local test_mode_buttons = script.Parent.MainFrame.functions.ScrollingFrame.keymode
	local t_enable = test_mode_buttons.enable
	local t_disable = test_mode_buttons.disable

	t_enable.MouseButton1Click:Connect(function()
		t_enable.Visible = false
		t_disable.Visible = true
		testmode = true
	end)
	t_disable.MouseButton1Click:Connect(function()
		t_enable.Visible = true
		t_disable.Visible = false
		testmode = false
	end)

	spawn(farm)

	script.Parent.MainFrame.Frame.close.MouseButton1Click:Connect(function()
		enabled = false
		script.Parent.MainFrame:Destroy()
		script:Destroy()
	end)
end)

-- Module Scripts:

local fake_module_scripts = {}

do -- ScreenGui.timer
	local script = Instance.new('ModuleScript', ScreenGui)
	script.Name = "timer"
	local function module_script()
		local module = {}
		module.defaultCorrectionNumber = 0.5
		module.defaultCorrectionType = "floor"
		function module:CorrectNumber(number, correctionNumber, correctionType)
			if not correctionNumber then
				correctionNumber = self.defaultCorrectionNumber
			end
			if not correctionType then
				correctionType = self.defaultCorrectionType
			end
			local v2 = math
			if correctionType == "floor" then
				return v2.floor(number * 10000 + correctionNumber) / 10000
			end
			if correctionType == "ceil" then
				return v2.ceil(number * 10000 + correctionNumber) / 10000
			end
		end
		function module.new(v01,v02,v03,v04)
			local v0 = 0
			local v1 = v02+v04
			local v2 = v01-v04
			for i = 1,v03 do
				local v3 = math
				local v4 = v3.random(v2,v1) 
				local v5 = ((v4*v01-v04)/v2)+((v4*v02+v04)*0)
				v0 += v5
			end
			local v6 = v0/v03
			if v6 < v01 then
				v6 = v01
				return v6
			elseif v6 > v02 then
				v6 = v02
				return v6
			else
				return require(script):CorrectNumber(v6)
			end
		end
		return module
	end
	fake_module_scripts[script] = module_script
end
do -- ScreenGui.SliderModule
	local script = Instance.new('ModuleScript', ScreenGui)
	script.Name = "SliderModule"
	local function module_script()
		local UIS = game:GetService("UserInputService")
		local RunService = game:GetService("RunService")
		
		type sliderConfigurationsType = {
			min: number,
			max: number,
			snapFactor: number
		}
		
		type extrasType = {
			TextBox: TextBox?,
			TextLabel: any,
			Decimals: number,
			DefaultValue: number,
		}
		
		type sliderFunctionsType = {
			Activate: (slider) -> (),
			__index: sliderFunctionsType
		}
		
		local Slider = {} :: slider
		
		local SliderFunctions = {} :: sliderFunctionsType
		SliderFunctions.__index = SliderFunctions
		
		local function calculateScalePosFromScreenSize(frame: Frame): UDim2
			local abs = frame.AbsolutePosition
			local vps = workspace.CurrentCamera.ViewportSize
		
			return UDim2.new(abs.X / vps.X, 0, abs.Y / vps.Y, 0)
		end
		
		local function calculateScaleSizeFromScreenSize(frame: Frame): UDim2
			local abs = frame.AbsoluteSize
			local vps = workspace.CurrentCamera.ViewportSize
		
			return UDim2.new(abs.X / vps.X, 0, abs.Y / vps.Y, 0)
		end
		
		Slider.new = function(slidingBase: Frame, sliderMarker: Frame, sliderButton: TextButton | ImageButton, sliderConfigurations: sliderConfigurationsType, extras: extrasType?): slider
			local self = setmetatable({}, SliderFunctions) :: slider
		
			assert(sliderConfigurations.min, "sliderConfigurations need a min variable.")
			assert(sliderConfigurations.max, "sliderConfigurations need a max variable.")
			assert(sliderConfigurations.snapFactor, "sliderConfigurations need a snapFactor variable.")
			assert(
				slidingBase.AnchorPoint == Vector2.new(0.5, 0.5),
				"Set the AnchorPoint of " .. slidingBase.Name .. " to (0.5, 0.5)"
			)
			assert(sliderButton:IsDescendantOf(sliderMarker), "SliderButton needs to be a descendant of sliderMarker.")
		
			self.slidingBase = slidingBase :: Frame
			self.sliderMarker = sliderMarker :: Frame
			self.sliderButton = sliderButton :: TextButton | ImageButton
			self.min = sliderConfigurations.min :: number
			self.max = sliderConfigurations.max :: number
			self.snapFactor = sliderConfigurations.snapFactor :: number
		
			local slidingBaseSizeFromScreenSize: UDim2 = calculateScaleSizeFromScreenSize(slidingBase)
			local slidingBasePosFromScreenSize: UDim2 = calculateScalePosFromScreenSize(slidingBase)
		
			self.firstPartPos = UDim2.new(slidingBasePosFromScreenSize.X.Scale, 0, slidingBasePosFromScreenSize.Y.Scale, 0) :: UDim2
			self.lineSize = slidingBaseSizeFromScreenSize.X.Scale :: number
		
			if extras then
				self.TargetTextLabel = extras.TextBox
				self.TargetTextBox = extras.TextBox
		
				if extras.TextLabel then
					self.TargetTextLabel = extras.TextLabel
				end
		
				if extras.Decimals then
					self.Decimals = extras.Decimals
				end
				
				if extras.DefaultValue then
					self.DefaultValue = extras.DefaultValue
				end
			end
		
			self.InteractionBegan = Instance.new("BindableEvent") :: BindableEvent
			self.InteractionEnded = Instance.new("BindableEvent") :: BindableEvent
			self.ValueChanged = Instance.new("BindableEvent") :: BindableEvent
			
			self.DidSetup = false :: boolean
			self.Connections = {} :: {[number]: RBXScriptConnection}
		
			return self
		end
		
		export type slider = typeof(Slider.new(Instance.new("Frame"), Instance.new("Frame"), Instance.new("TextButton"), {} :: sliderConfigurationsType, {} :: extrasType))
		
		local function decimalRound(num: number, places: number): number
			local power = 10 ^ places
			return math.round(num * power) / power
		end
		
		local function snap(self: slider, posInLine: number): number
			local val = math.clamp(math.floor(posInLine / self.snapFactor) * self.snapFactor, 0, 1)
			return val
		end
		
		local function getText(self: slider, snapN: number): number
			local ratio = 1 / self.snapFactor
			local step = (self.max - self.min) / ratio
			
			return decimalRound(self.min + (step * (snapN / self.snapFactor)), self.Decimals or 1)
		end
		
		function SliderFunctions:Activate()
			local runServiceEvent
			local previousValue = 0
			
			if not self.DidSetup and self.DefaultValue then
				previousValue = self.DefaultValue
				
				local scaleVal = (self.DefaultValue-self.min)/(self.max - self.min)
				self.sliderMarker.Position = UDim2.new(scaleVal, 0, self.sliderMarker.Position.Y.Scale, 0)
				self.CurrentValue = self.DefaultValue
				
				if self.TargetTextLabel then
					self.TargetTextLabel.Text = self.DefaultValue
				end
				
				self.DidSetup = true
			end
			
			self.Connections[#self.Connections+1] = self.sliderButton.MouseButton1Down:Connect(function()
				self.InteractionBegan:Fire()
		
				runServiceEvent = RunService.RenderStepped:Connect(function()
					local index = #self.Connections+1
					self.Connections[index] = runServiceEvent
		
					if not UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
						runServiceEvent:Disconnect()
						self.Connections[index] = nil
						self.InteractionEnded:Fire(self.CurrentValue)
						return
					end
					
					local vpX: number = workspace.Camera.ViewportSize.X
					local mouseLoc: Vector2 = UIS:GetMouseLocation()
		
					local xScale: number = math.clamp((mouseLoc.X - (self.firstPartPos.X.Scale :: number * vpX)) / vpX, 0, self.lineSize)
		
					if xScale > 0 then
						if xScale < 1 then
							self.sliderMarker.Position = UDim2.new(snap(self, xScale / self.lineSize), 0, self.sliderMarker.Position.Y.Scale, 0)
							self.CurrentValue = tostring(getText(self, snap(self, xScale / self.lineSize)))
		
							if self.TargetTextLabel then
								self.TargetTextLabel.Text = self.CurrentValue
							end
		
							if previousValue ~= self.CurrentValue then
								previousValue = self.CurrentValue
								self.ValueChanged:Fire(self.CurrentValue)
							end
						end
					else
						self.sliderMarker.Position = UDim2.new(0, 0, self.sliderMarker.Position.Y.Scale, 0)
						self.CurrentValue = getText(self, snap(self, xScale / self.lineSize))
		
						if self.TargetTextLabel then
							self.TargetTextLabel.Text = self.CurrentValue
						end
					end
				end)
			end)
		
			if self.TargetTextBox then
				self.Connections[#self.Connections+1] = self.TargetTextBox.FocusLost:Connect(function()
					local currentText = tonumber(self.TargetTextBox.Text)
		
					if currentText then
						if currentText < self.max and currentText > self.min then
							self.CurrentValue = tostring(currentText)
		
							local scaleVal = (currentText - self.min) / (self.max - self.min)
							self.sliderMarker.Position = UDim2.new(scaleVal, 0, self.sliderMarker.Position.Y.Scale, 0)
							self.ValueChanged:Fire(self.CurrentValue)
							self.InteractionEnded:Fire(self.CurrentValue)
						else
							if self.CurrentValue then
								self.TargetTextBox.Text = self.CurrentValue
							end
						end
					end
				end)
			end
		end
		
		function SliderFunctions:Deactivate()
			for _, connection: RBXScriptConnection in ipairs(self.Connections) do
				if connection.Connected then
					connection:Disconnect()
				end
			end
		
			self.Connections = {}
		end
		
		return Slider
	end
	fake_module_scripts[script] = module_script
end
